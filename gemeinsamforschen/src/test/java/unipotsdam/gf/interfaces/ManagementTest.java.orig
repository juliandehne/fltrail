package unipotsdam.gf.interfaces;

import org.junit.Before;
import org.junit.Test;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;
import unipotsdam.gf.core.management.ManagementImpl;
import unipotsdam.gf.core.management.project.Project;
import unipotsdam.gf.core.management.project.ProjectConfiguration;
import unipotsdam.gf.core.management.user.User;
import unipotsdam.gf.core.management.user.UserProfile;
import unipotsdam.gf.util.TestHelper;

import static org.junit.Assert.assertNotNull;

/**
 * Created by dehne on 01.06.2018.
 */


public class ManagementTest  {

    /**
     * Utility to creaty dummy data for students
     */
<<<<<<< HEAD
    PodamFactory factory = new PodamFactoryImpl();


    @Test
    public void testDelete() {

    }

    /**
     *  CREATE a user in the DB using the
     */
    @Test
    public void testExists() {
        ManagementImpl management = new ManagementImpl();
        User user = new User("julian", "1234", "from1123123123@stuff.com", true);
        assert !management.exists(user);
    }

    /**
     *  CREATE a user in the DB using the
     */
    @Test
    public void testCreate() {
        ManagementImpl management = new ManagementImpl();
        User user = new User("julian", "1234", "from@stuff.com", false);
        management.create(user, new UserProfile());
        assert management.exists(user);
    }

    /**
     * Test creating a user in the DB
     */
    @Test
    public void testCreate1() {
        ManagementImpl management = new ManagementImpl();
        Project project = factory.manufacturePojo(Project.class);
        management.create(project);
=======
    private PodamFactory factory = new PodamFactoryImpl();
    private ManagementImpl management;
>>>>>>> origin/development_master

    @Before
    public void setUp() throws Exception {
        management = TestHelper.getManagementImpl();
    }

    @Test
    public void testRegister() {
        User user = new User("julian", "1234", "from@stuff.com", true);
        management.create(user, new UserProfile());
        assert management.exists(user);

        Project project = factory.manufacturePojo(Project.class);
        management.create(project);
        management.register(user, project, null);
    }

    @Test
<<<<<<< HEAD
    public void testUpdateUser() {
        ManagementImpl management = new ManagementImpl();
        User user = new User("julian", "1234", "testUpdateUser@stuff.com", true);
        user.setToken("abc");
        management.create(user, new UserProfile());
        assertTrue(management.exists(user));

        user.setStudent(false);
        management.update(user);
        assertTrue(management.exists(user));
        User managementUser = management.getUserByToken(user.getToken());
        assertEquals(user.getStudent(), managementUser.getStudent());
    }

    @Test
    public void testGetUsers() {
        ManagementImpl management = new ManagementImpl();
        User user = new User("julian", "1234", "from@stuff.com", false);
        management.create(user, new UserProfile());
        assert management.exists(user);

        Project project = factory.manufacturePojo(Project.class);
        management.create(project);
        management.register(user, project, null);

        assertTrue(management.exists(project));

        User user2 = new User("julian2", "12345", "from2@stuff.com", true);
        management.create(user2, new UserProfile());
        assert management.exists(user2);

        List<User> users = management.getUsers(project);
        assert users != null;
        assert !users.isEmpty();

    }

    @Test
=======
>>>>>>> origin/development_master
    public void testProjectConfiguration() {
        ProjectConfiguration projectConfiguration = factory.manufacturePojo(ProjectConfiguration.class);
        Project project = factory.manufacturePojo(Project.class);

        management.create(projectConfiguration, project);

        ProjectConfiguration projectConfiguration1 = management.getProjectConfiguration(project);
        assertNotNull(projectConfiguration1.getCriteriaSelected());
        assertNotNull(projectConfiguration1.getAssessmentMechanismSelected());
        assertNotNull(projectConfiguration1.getGroupMechanismSelected());
        assertNotNull(projectConfiguration1.getPhasesSelected());

    }
}